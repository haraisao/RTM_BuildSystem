// -*- C++ -*-
/*!
 * @file  @ProjectName@.h
 * @author @author@
 *
 * Copyright (C) 
 *     All rights reserved.
 *
 */

#ifndef _@ProjectName@_H_
#define _@ProjectName@_H_

#include <iostream>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <math.h>

/*
 insert include files for 3rd party libs
*/

/*
  Data Types
*/
#include <rtm/idl/BasicDataTypeSkel.h>
#include <rtm/idl/ExtendedDataTypesSkel.h>
#include <rtm/idl/InterfaceDataTypesSkel.h>

/*
  for RTC
*/
#include <rtm/Manager.h>
#include <rtm/DataFlowComponentBase.h>
#include <rtm/CorbaPort.h>
#include <rtm/DataInPort.h>
#include <rtm/DataOutPort.h>
#include <rtm/SystemLogger.h>
#include <coil/Mutex.h>

// Service implementation headers
// <rtc-template block="service_impl_h">

// </rtc-template>

// Service Consumer stub headers
// <rtc-template block="consumer_stub_h">

// </rtc-template>

using namespace RTC;

/*!
 * @class @ProjectName@
 * @brief Periodic Console Out Component
 *
 */
class @ProjectName@
  : public RTC::DataFlowComponentBase
{
 public:

  /*!
   * @brief constructor
   * @param manager Maneger Object
   */
  @ProjectName@(RTC::Manager* manager);

  /*!
   * @brief destructor
   */
  ~@ProjectName@();

  // <rtc-template block="public_attribute">

  // </rtc-template>

  // <rtc-template block="public_operation">

  // </rtc-template>

   /**
     Actions
  */
   @action_decls@

 protected:
  // <rtc-template block="protected_attribute">

  // </rtc-template>

  // <rtc-template block="protected_operation">

  // </rtc-template>

  // DataPort declaration
  // <rtc-template block="dataport_declare">

@dataport_decl@

  // </rtc-template>

  // CORBA Port declaration
  // <rtc-template block="corbaport_declare">

  // </rtc-template>

  // Service declaration
  // <rtc-template block="service_declare">

  // </rtc-template>

  // Consumer declaration
  // <rtc-template block="consumer_declare">

  // </rtc-template>

 private:

  // <rtc-template block="private_attribute">
  coil::Mutex m_mutex;
  @configuration_decl@

  // </rtc-template>

  // <rtc-template block="private_operation">

  // </rtc-template>

};

@data_listener@

extern "C"
{
  /*!
   * @brief @ProjectName@ initialize
   *
   * @param manager Maneger Object
   */
  DLL_EXPORT void @ProjectName@Init(RTC::Manager* manager);
};


#endif // _@ProjectName@_H_
